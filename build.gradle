
buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'com.h2database:h2:1.3.175'
		classpath 'org.apache.activemq:activemq-broker:5.9.0'
    }
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'jetty'
apply plugin: 'war'


sourceCompatibility = 1.6
version = '0.1'


// EMMA code coverage
configurations{
	emma
}


repositories {
    mavenCentral()
}


dependencies{

  // Code coverage tools
  emma 'emma:emma:2.1.5320'
  emma 'emma:emma_ant:2.1.5320'
	
  // runtime dependency on h2 so jetty can load it 
  providedRuntime 'com.h2database:h2:1.3.175'
  compile 'com.h2database:h2:1.3.175'
	
  // Junit support for testing
  testCompile group: 'junit', name: 'junit', version: '4.+'
  testCompile 'org.codehaus.groovy:groovy-all:2.2.0'
  testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'

  // Servlet support
  providedCompile 'javax.servlet:servlet-api:2.5'
  runtime 'javax.servlet:jstl:1.1.2'
  
  // Jersey Support
  compile 'javax.ws.rs:jsr311-api:1.1.1'
  compile 'com.sun.jersey:jersey-server:1.18'
  compile 'com.sun.jersey:jersey-client:1.18'
  compile 'com.sun.jersey:jersey-core:1.18'
  compile 'com.sun.jersey:jersey-servlet:1.18'
  compile 'com.sun.jersey:jersey-json:1.18'
  compile 'org.codehaus.groovy:groovy-all:2.2.0'

  // Apache DB Connection Pooling
  compile 'commons-dbcp:commons-dbcp:1.4'
  providedRuntime 'commons-dbcp:commons-dbcp:1.4'
  
  // slf4j so we can have some logging
  compile 'org.slf4j:slf4j-log4j12:1.7.5'
  
  // JMS Messaging support
  providedRuntime 'javax.jms:javax.jms-api:2.0'
  compile 'javax.jms:javax.jms-api:2.0'
  
  // Apache ActiveMQ JMS broker 
  providedRuntime 'org.apache.activemq:activemq-broker:5.9.0' 
  compile 'org.apache.activemq:activemq-broker:5.9.0'

}


def emmaConvention = new EmmaPluginConvention(project)
project.convention.plugins.emma = emmaConvention

class EmmaPluginConvention{
	def verbosityLevel = "info"
	def reportPath;
	def coverageFileName;
	def tmpDir;
	def instrDir;
	def metaDataFilePath;
	
	def emma(Closure close){
		close.delegate = this;
		close.run()
	}
	
	EmmaPluginConvention(Project project){
		reportPath 			= "${project.reporting.baseDir.absolutePath}/emma"
		coverageFileName	= "coverage"
		tmpDir				= "${project.buildDir}/tmp/emma"
		instrDir			= "${tmpDir}/instr"
		metaDataFilePath 	= "${tmpDir}/metadata.emma"
	}
}


test {
    systemProperties 'property': 'value'
	
	jvmArgs "-Demma.coverage.out.file=build/tmp/emma/metadata.emma", "-Demma.coverage.out.merge=true"

   doFirst{
      ant.taskdef( resource:"emma_ant.properties", classpath: configurations.emma.asPath)
       ant.path(id:"run.classpath") {
          pathelement(location:sourceSets.main.output.classesDir.absolutePath)
       }
        ant.emma(verbosity:'info'){
            instr(merge:"true", destdir:'build/tmp/emma/instr', instrpathref:"run.classpath", metadatafile:'build/tmp/emma/metadata.emma'){
                instrpath{
                    fileset(dir:sourceSets.main.output.classesDir.absolutePath, includes:"**/*.class")
                }
            }
        }
         setClasspath(files("$buildDir/tmp/emma/instr") + configurations.emma +  getClasspath())
      }

      doLast{
        ant.emma(enabled:"true"){
            report(sourcepath:"src/main/java"){
                fileset(dir:"build/tmp/emma"){
                    include(name:"*.emma")
                }
                txt(outfile:"build/reports/emma/coverage.txt")
                html(outfile:"build/reports/emma/coverage.html")
                xml(outfile:"build/reports/emma/coverage.xml")
            }
        }
    }
}


// Configure jettyRun, jettyRunWar and jettyStop tasks.
jettyRun {  
  jettyEnvXml = file('src/main/resources/jetty-env.xml')
  contextPath = 'demo'
}


// Run the h2 server before jetty starts up
[jettyRun, jettyRunWar]*.doFirst {

  // Start the H2 database server which accepts local TCP connections and 
  // supports the web console  
  org.h2.tools.Server.main("-tcp", "-web")

  // Start an ActiveMQ JMS service
  org.apache.activemq.broker.BrokerService broker = new org.apache.activemq.broker.BrokerService()
  broker.useJmx = false
  broker.setBrokerName("BOSS")
  broker.setPersistent(false)
  broker.addConnector("tcp://localhost:61616")
  broker.start()
  
}

