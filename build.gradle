


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'jetty'
apply plugin: 'war'


sourceCompatibility = 1.6
version = '0.1'


// EMMA code coverage
configurations{
	emma
}


repositories {
    mavenCentral()
}


ext.junitVersion = '4.11'
ext.servletVersion = '2.5'
ext.h2Version = '1.4.177'
ext.emmaVersion = '2.1.5320'
ext.groovyVersion = '2.2.0'
ext.spockVersion = '0.7-groovy-2.0'
ext.javaWsVersion = '1.1.1'
ext.jerseyVersion = '1.18'
ext.dbcpVersion = '1.4'
ext.slf4jVersion = '1.7.5'
ext.jmsVersion = '2.0'
ext.activemqVersion = '5.9.0'

dependencies{

	// Code coverage tools
	emma "emma:emma:$emmaVersion"
	emma "emma:emma_ant:$emmaVersion"
	
	// runtime dependency on h2 so jetty can load it
	providedRuntime "com.h2database:h2:$h2Version"

	// jUnit support for testing
	testCompile "junit:junit:$junitVersion"
	
	// Groovy support
	testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
	compile "org.codehaus.groovy:groovy-all:$groovyVersion"
	testCompile "org.spockframework:spock-core:$spockVersion"

	// Servlet support
	providedCompile "javax.servlet:servlet-api:$servletVersion"
	runtime "javax.servlet:servlet-api:$servletVersion"

	// Jersey Support
	compile "javax.ws.rs:jsr311-api:$javaWsVersion"

	compile "com.sun.jersey:jersey-server:$jerseyVersion"
	compile "com.sun.jersey:jersey-client:$jerseyVersion"
	compile "com.sun.jersey:jersey-core:$jerseyVersion"
	compile "com.sun.jersey:jersey-servlet:$jerseyVersion"
	compile "com.sun.jersey:jersey-json:$jerseyVersion"

	// Apache DB Connection Pooling
	compile "commons-dbcp:commons-dbcp:$dbcpVersion"
	providedRuntime "commons-dbcp:commons-dbcp:$dbcpVersion"

	// slf4j so we can have some logging
	compile "org.slf4j:slf4j-log4j12:$slf4jVersion"

	// JMS Messaging support
	providedRuntime "javax.jms:javax.jms-api:$jmsVersion"
	compile "javax.jms:javax.jms-api:$jmsVersion"

	// Apache ActiveMQ JMS broker 
	providedRuntime "org.apache.activemq:activemq-broker:$activemqVersion" 
	compile "org.apache.activemq:activemq-broker:$activemqVersion"

}

buildscript {
	repositories {
		mavenCentral()
	}
	ext.h2Version = '1.4.177'
	ext.activemqVersion = '5.9.0'
	dependencies {
		classpath "com.h2database:h2:$h2Version"
		classpath "org.apache.activemq:activemq-broker:$activemqVersion"
    }
}

def emmaConvention = new EmmaPluginConvention(project)
project.convention.plugins.emma = emmaConvention

class EmmaPluginConvention{
	def verbosityLevel = "info"
	def reportPath;
	def coverageFileName;
	def tmpDir;
	def instrDir;
	def metaDataFilePath;
	
	def emma(Closure close){
		close.delegate = this;
		close.run()
	}
	
	EmmaPluginConvention(Project project){
		reportPath 			= "${project.reporting.baseDir.absolutePath}/emma"
		coverageFileName	= "coverage"
		tmpDir				= "${project.buildDir}/tmp/emma"
		instrDir			= "${tmpDir}/instr"
		metaDataFilePath 	= "${tmpDir}/metadata.emma"
	}
}


test {
    systemProperties 'property': 'value'
	
	jvmArgs "-Demma.coverage.out.file=build/tmp/emma/metadata.emma", "-Demma.coverage.out.merge=true"

   doFirst{
      ant.taskdef( resource:"emma_ant.properties", classpath: configurations.emma.asPath)
       ant.path(id:"run.classpath") {
          pathelement(location:sourceSets.main.output.classesDir.absolutePath)
       }
        ant.emma(verbosity:'info'){
            instr(merge:"true", destdir:'build/tmp/emma/instr', instrpathref:"run.classpath", metadatafile:'build/tmp/emma/metadata.emma'){
                instrpath{
                    fileset(dir:sourceSets.main.output.classesDir.absolutePath, includes:"**/*.class")
                }
            }
        }
         setClasspath(files("$buildDir/tmp/emma/instr") + configurations.emma +  getClasspath())
      }

      doLast{
        ant.emma(enabled:"true"){
            report(sourcepath:"src/main/java"){
                fileset(dir:"build/tmp/emma"){
                    include(name:"*.emma")
                }
                txt(outfile:"build/reports/emma/coverage.txt")
                html(outfile:"build/reports/emma/coverage.html")
                xml(outfile:"build/reports/emma/coverage.xml")
            }
        }
    }
}


// Configure jettyRun, jettyRunWar and jettyStop tasks.
jettyRun {  
  jettyEnvXml = file('src/main/resources/jetty-env.xml')
  contextPath = 'demo'
}


// Run the h2 server before jetty starts up
[jettyRun, jettyRunWar]*.doFirst {

  // Start the H2 database server which accepts local TCP connections and 
  // supports the web console  
  org.h2.tools.Server.main("-tcp", "-web")

  // Start an ActiveMQ JMS service
  org.apache.activemq.broker.BrokerService broker = new org.apache.activemq.broker.BrokerService()
  broker.useJmx = false
  broker.setBrokerName("BOSS")
  broker.setPersistent(false)
  broker.addConnector("tcp://localhost:61616")
  broker.start()
  
}

